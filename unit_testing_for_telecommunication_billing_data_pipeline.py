# -*- coding: utf-8 -*-
"""Unit_Testing_for_Telecommunication_Billing_Data_Pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U7sBYu7DgEc1JG_OkxfB6lkdRyCLRGWN

# Unit Testing for Telecommunication Billing Data Pipeline

## **Background Information**

You are working on a project related to telecommunication billing data. As part of the project, a data pipeline has been provided to you. The data pipeline is responsible for extracting data from a CSV file, performing transformations using pandas, and storing the transformed data in another CSV file. Your task is to write unit tests for the functions in the data pipeline using the
unittest framework.

## **Problem Statement**


Your goal is to develop robust unit tests for the three functions in the data pipeline: **data_extraction**, **data_transformation**, and **data_loading**. These tests ensure the datapipeline functions correctly and handle various scenarios and edge cases

Import Necesary Libraries
"""

import pandas as pd
import unittest

"""Reading the  data from the file"""

#file path as defined by file location in colab
file_path = '/content/billing_data.csv'

"""Extract data loaded from the csv file"""

def data_extraction(file_path):
    data = pd.read_csv(file_path)
    return data

"""Tranforming the data columns"""

def data_transformation(data):
    data = data.drop_duplicates()
    data['billing_amount'] = data['billing_amount'].str.replace('$', '').astype(float)
    data['total_charges'] = data['billing_amount'] + data['tax_amount']
    return data

"""Load transformed data into output file"""

#path to output file
output_file = '/content/billing_data_output.csv'
def data_loading(data, output_file):
    data.to_csv(output_file, index=False)

"""Perform test cases on data extraction, tranformation and Loading procedures"""

class TestDataPipeline(unittest.TestCase):

#upload data test files
    def setUp(self):
     self.file_path = 'billing_data.csv'
     self.output_file = 'billing_data_output.csv'
     self.data = pd.read_csv(self.file_path)

#remove files after test
    def tearDown(self):
      pass

    def test_data_extraction(self):
        data_extraction(self.file_path)

        # Test Data Extraction Function
        extracted_data = data_extraction(self.file_path)

        #Test if exracted data is a dataframe
        self.assertTrue(isinstance(extracted_data, pd.DataFrame))
        self.assertEqual(extracted_data.shape, self.data.shape)

        # Test the columns of the extracted data
        existing_columns = ['customer_id', 'billing_amount', 'tax_amount']
        self.assertListEqual(list(extracted_data.columns), existing_columns)

        # Test if extraxted data is not empty
        self.assertFalse(extracted_data.empty)

    def test_data_transformation(self):

        extracted_data = data_extraction(self.file_path)

        transformed_data = data_transformation(extracted_data)

        # test if data transformed is a dataframe
        self.assertIsInstance(transformed_data, pd.DataFrame)
        self.assertEqual(len(transformed_data), len(self.expected_data))
        #check for  duplicates in the data
        self.assertEqual(len(transformed_data), len(self.data.drop_duplicates()))

        # Test conversion of billing  and tax amount
        self.assertTrue(pd.api.types.is_numeric_dtype(transformed_data['tax_amount']))
        self.assertTrue(pd.api.types.is_numeric_dtype(transformed_data['billing_amount']))


    def test_data_loading(self):

       # Test data loadiing in csv
        data_loading(self.data, self.output_file)

        loaded_data = pd.read_csv(self.output_file)
        #validate if loaded_data is dataframe
        self.assertTrue(isinstance(loaded_data, pd.DataFrame))
        self.assertEqual(loaded_data.shape, self.data.shape)
        self.assertTrue(loaded_data.equals(self.data))

        # Validate columns of the output files
        expected_columns = ['customer_id', 'billing_amount', 'tax_amount', 'total_charges']
        self.assertListEqual(list(loaded_data.columns), expected_columns)

        # validate  loaded file against original data
        self.assertTrue(loaded_data.equals(self.data))

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)